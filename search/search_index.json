{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cross-Square Feature Usage Event Catalog","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Pacali debebunt officium","text":""},{"location":"about/#mergitur-et-opifex-achillem-nullisque-potest-rubor","title":"Mergitur et opifex Achillem nullisque potest rubor","text":"<p>Lorem markdownum abstulit, et sulphura, ille non pars adeo. Tumultus equus meministis caudice est et dies quod; deus cetera dracone, sorores tu. Undas deducit letalibus fuissem emisitque scissae facundia, adclivis relinquit ratione spatium!</p> <pre><code>if (ripcordingRemote(ergonomicsCpsSocial, natMonochrome)) {\n    applet_on_noc.bluetooth(lion, cache_webmaster(3,\n            wireless_user_minicomputer));\n    voip.mpNetbiosVfat = wimax.tweetPlugPppoe(bounceName, perl(\n            drm_snow_burn), card);\n    bookmark_download_install.encoding_vrml += ethernetVariableSnapshot(\n            web_host_traceroute, sdram);\n} else {\n    ciscSpoofing.cable = trojan;\n}\nif (unicodeDataProxy + export_barcraft) {\n    touchscreen(rte);\n    memory += computer * atm_gopher_screenshot(memoryRwRuntime);\n}\npartyUatHub += subdirectorySimm(frequency);\nif (240708 + scroll_binary + 1) {\n    wan.pdfOleVdsl(-3, 2 + 2, veronica_domain);\n    download(slashdot);\n    text_protocol.hashtag_bit -= 4;\n}\nif (cdn_media_leopard(bitmap(acl), snapshotCamelcase, mamp_heat_ide +\n        hardening)) {\n    exbibyte_console = up;\n    bash_real = ripcording(intellectual + fiosDirectxMedia, header_horse, 4\n            + 1);\n    folder(utfGoogle, ribbon_responsive);\n}\n</code></pre>"},{"location":"about/#quaeque-velle-et-sidereum-in-altera-tiresia","title":"Quaeque velle et sidereum in altera Tiresia","text":"<p>Prospectat ira crimen altera habet iterum brevem sagittifera iras peremi tenuere me anni quoque, stipes. Illa pugnat variarum aetherias, esse squamis; ipsa Somnus: ab. Intra est, Salmacis hoc in fata vox poterat referam abit latus. Praeter lumina, caelestique comas; est Demoleon et hostis, sacerdos fieri temptasse. Referre caput proximus spina, Iuno et dives manibus sanguine invasit, non adspicias quoque interea.</p> <ol> <li>Adeunt hanc</li> <li>Dedit haec sermone colle Iove hesternos Haec</li> <li>Hunc tonitrus</li> <li>Corvum Mithridateisque caeruleo</li> </ol>"},{"location":"about/#adversas-sub-opes-quatiatur-iubet-ad-idaeo","title":"Adversas sub opes quatiatur iubet ad Idaeo","text":"<p>Parentis ut remanet illa nunc fieri cornua caelo circinat induit. Templa ac pars arma inque viri nubes lacrimisque haec fructus gratesque aspicit postquam erat tamen! Oculos in flumina ut Iphis. Oraque licet.</p>"},{"location":"about/#lege-suae-gelidis-potest-in-poteris-animos","title":"Lege suae gelidis potest in poteris animos","text":"<p>Fusus saniem aevo liquidis flumineae corpora per filius me, vate annis, coniunx aras. Quem coepit forti, in sunt cadunt nymphae pugnabo versum est sumat, sumite inhaeret iamdudum; et. Media loquendi te virtute durisque haesit. Vis est indigenas castris cervus hic plebe omnia faucesque portante colorem fremebundus invia porrexi Pyramus tum hausit intrasse Aiacis.</p> <p>Telis flamma Ityosque Ausoniis comitavit cuperem? Canes senex dicere interea dea pede parte habenis, ut tum quodque isse. Et unam tenus lumina, nocens faveat, ignarus, dea!</p>"},{"location":"format/","title":"Event Definition Format","text":"<p>Event definitions live in the <code>/events</code> directory, and each Entity gets its own subdirectory and YAML definition file.</p>"},{"location":"format/#global-cdf-configuration","title":"Global CDF Configuration","text":"<p>A file named <code>cdf.yaml</code> located in the root events directory can be used to configure global settings for CDF.</p>"},{"location":"format/#types","title":"<code>types</code>","text":"<p>Type: <code>Enum</code></p> <p>A set of custom enum definitions that are globally scoped. Any event can reference these enums.</p>"},{"location":"format/#tags","title":"<code>tags</code>","text":"<p>Type: <code>TagDeclaration</code></p> <p>A set of declarations for all the tags that can be applied to events. The keys of this object are the tag identifiers that are used in the Events to refer to a specific tag. By convention, the keys/identifiers should be written in kebab-case.</p> <pre><code>tags:\nmy-tag:\nname: This is My Tag\ndescription: The description goes here\n</code></pre>"},{"location":"format/#destinations","title":"<code>destinations</code>","text":"<p>Type: <code>DestinationDeclaration</code></p> <p>A restricted set of event destinations. An event will only be sent to destinations defined in this list.</p> <p>NOTE: MAINTAINED BY THE CDP TEAM. DO NOT ADD/REMOVE/MODIFY.</p>"},{"location":"format/#entities","title":"Entities","text":"<p>Entity names should be a high-level noun written in \u201cupper\u201d camel case, and should go in an event definition file that matches the name of the entity (written in snake_case).</p> <p>Compiler Source: <code>compiler/src/.../config/Entity.kt</code></p>"},{"location":"format/#description","title":"<code>description</code>","text":"<p>Type: <code>string</code></p> <p>A description of what the Entity represents.</p>"},{"location":"format/#actions","title":"<code>actions</code>","text":"<p>Type: <code>Action</code></p> <p>A set of action definitions for this entity. See the section of Action definitions below.</p>"},{"location":"format/#types_1","title":"<code>types</code>","text":"<p>Type: <code>Enum</code></p> <p>A set of custom enum definitions that are scoped to this Entity. Only Events that are contained within this Entity can reference these Enums.</p> <pre><code># events/my_entity/my_entity.yaml\nMyEntity:\ndescription: \"A description of My Entity\"\nactions:\nMyAction: ...\ntypes:\nMyType: ...\n</code></pre>"},{"location":"format/#actions_1","title":"Actions","text":"<p>Actions named should be a high-level verb and should also be named in \u201cupper\u201d camel case.</p> <p>Compiler Source: <code>compiler/src/.../config/Action.kt</code></p>"},{"location":"format/#definition","title":"<code>definition</code>","text":"<p>Type: <code>string</code></p> <p>A description of what the Action represents.</p>"},{"location":"format/#events","title":"<code>events</code>","text":"<p>Type: <code>Event</code></p> <p>A set of event definitions for this action. See the section on Event definitions below.</p>"},{"location":"format/#deprecated-optional","title":"<code>deprecated</code> (optional)","text":"<p>Type: <code>string</code> Default: <code>null</code></p> <p>Actions can be marked as deprecated when they are no longer needed by adding this property with a message explaining why the action was deprecated, or what replacements should be used in its place.</p>"},{"location":"format/#example","title":"Example","text":"<pre><code># events/my_entity/my_eneity.yaml\nMyEntity:\nactions:\nMyAction:\ndefinition: \"A description of My Action\"\ndeprecated: \"This action should no longer be used because[...]\"\nevents:\nMyEvent: ...\nAnotherAction: ...\n</code></pre>"},{"location":"format/#events_1","title":"Events","text":"<p>Event names should be a specific verb(+noun) written in \u201cupper\u201d camel case.</p> <p>Compiler Source: <code>compiler/src/.../config/Event.kt</code></p>"},{"location":"format/#comment","title":"<code>comment</code>","text":"<p>Type: <code>string</code></p> <p>A description of what the Event represents, including scenarios which may trigger this event to be recorded.</p>"},{"location":"format/#owners","title":"<code>owners</code>","text":"<p>Type: <code>list&lt;string&gt;</code></p> <p>A list of event owners. Preferably a team name or slack channel, but LDAPs work as well. Will be displayed on the event page in go/$cdf.</p>"},{"location":"format/#params","title":"<code>params</code>","text":"<p>Type: <code>list&lt;EventParam&gt;</code></p> <p>A list of data parameters that this Event contains. See the Event Params section below for more details.</p>"},{"location":"format/#tags_1","title":"<code>tags</code>","text":"<p>Type: <code>list&lt;string&gt;</code></p> <p>A list of tag identifiers listing which tags are applied to this Event. See the global configuration for  details.</p>"},{"location":"format/#types_2","title":"<code>types</code>","text":"<p>Type: <code>Enum</code></p> <p>A set of custom enum definitions that are scoped specifically to this event. Other event definitions can not reference Enums that are defined here.</p>"},{"location":"format/#destinations_1","title":"<code>destinations</code>","text":"<p>Type: [<code>list&lt;string&gt;</code>]</p> <p>This list of destinations will correspond to where the cdp-proxy client will send your Event. See the global configuration for details.</p>"},{"location":"format/#deprecated-optional_1","title":"<code>deprecated</code> (optional)","text":"<p>Type: <code>string</code> Default: <code>null</code></p> <p>Events can be marked as deprecated when they are no longer needed by adding this property with a message explaining why the event was deprecated, or what replacements should be used in its place.</p>"},{"location":"format/#example_1","title":"Example","text":"<pre><code># events/my_entity/my_entity.yaml\nMyEntity:\nactions:\nMyAction:\nevents:\nMyEvent:\ncomment: \"A description of MyEvent\"\ndeprecated: \"This event is deprecated because[...]\"\nparams: [ ... ]\ntypes: ...\nAnotherEvent: ...\n</code></pre>"},{"location":"format/#event-params","title":"Event Params","text":"<p>The parameters of an Event are defined as a list of Event Param objects. The first key in the Param object is the name of the parameter, and its value is the type of the parameter.</p> <p>Compiler Source: <code>compiler/src/.../config/Param.kt</code></p>"},{"location":"format/#name-type","title":"<code>name: type</code>","text":"<p>The name and type of the property. The <code>type</code> of the property can be any built-in type or an <code>Enum</code></p>"},{"location":"format/#nullable-types","title":"Nullable Types","text":"<p>By default, all event parameters are optional and have a default value of <code>null</code>. To mark an event parameter as required, simply add <code>required: true</code> to that parameter. The generated code will enforce that a value must be passed for that parameter.</p> <p>Making a parameter required will make that parameter non-nullable in the generated code. To allow a null value to be passed to a required parameter, simply add a <code>?</code> after the parameter\u2019s type in the CDF definition.</p> <pre><code># Event definition\nViewTile:\nparams:\n# Required parameter, can not be null\n- app_location: AppLocation\nrequired: true\n# Required parameter, but this one can be null  \n- referrer_flow_token: String?\nrequired: true\n# Optional parameters, both can be null (the ? is optional here)  \n- row: Int32\n- col: Int32?\n</code></pre>"},{"location":"format/#comment_1","title":"<code>comment</code>","text":"<p>Type: <code>string</code></p> <p>A comment describing what this parameter represents.</p>"},{"location":"format/#required-optional","title":"<code>required</code> (optional)","text":"<p>Type: <code>boolean</code> Default: <code>false</code></p> <p>If set to true, this parameter will be required when the event is sent. The generated code for this parameter will be a non-null (or non-optional) parameter.</p> <p>Note: a parameter can not be both deprecated and required, and the compiler will report an error if this happens.</p>"},{"location":"format/#deprecated-optional_2","title":"<code>deprecated</code> (optional)","text":"<p>Type: <code>string</code> Default: <code>null</code></p> <p>Event Parameters can be marked as deprecated when they are no longer needed by adding this property with a message explaining why the parameter was deprecated, or what replacements should be used in its place.</p> <p>Note: a parameter can not be both deprecated and required, and the compiler will report an error if this happens.</p>"},{"location":"format/#built-in-types","title":"Built-In Types","text":"<p>The following types are built-in and can be specified on any event parameter:</p> <p><code>String</code>, <code>Int32</code>, <code>Int64</code>, <code>Bool</code>, <code>Double</code>, <code>Int</code>.</p>"},{"location":"format/#custom-enums","title":"Custom Enums","text":"<p>Custom Enums allow you to restrict the values of a parameter to a predefined set of values. These types can be scoped globally, at the entity level, and at the event level.</p> <p>Enums are defined with a list of possible entries, which are typically written in all UPPERCASE snake case.</p> <pre><code>types:\nMyEnum:\n- OPTION_A\n- OPTION_B\n- OPTION_C </code></pre>"},{"location":"format/#adding-comments-to-enums-and-entries","title":"Adding Comments to Enums and Entries","text":"<p>The default format for defining Enums is a short form. Adding comments requires a longer format.</p> <pre><code>types:\nMyEnum:\ncomment: An explanation of this Enum\n# The entries are defined with a dedicated property here\nentries:\n# The colon after the entry name is required here to allow the comment property to be specified\n- A:\ncomment: description of what entry \"A\" means\n- B\n- C\n</code></pre>"},{"location":"format/#deprecating-enums-and-entries","title":"Deprecating Enums and Entries","text":"<p>Like comments, this requires the longer definition format.</p>"},{"location":"format/#adding-comments-to-enums-and-entries_1","title":"Adding Comments to Enums and Entries","text":"<p>The default format for defining Enums is a short form. Adding comments requires a longer format.</p> <pre><code>types:\nMyEnum:\ndeprecated: An explanation of this deprecation\nentries:\n# The colon after the entry name is required here to allow the comment property to be specified\n- A:\ndeprecated: description of why this is deprecated\n- B\n- C\n</code></pre>"},{"location":"format/#tag-declaration","title":"Tag Declaration","text":"<p>A tag declaration contains the name and description of a tag. These will be displayed in the generated documentation pages.</p> <pre><code>tags:\nmy-tag:\nname: This is My Tag\ndescription: The description goes here\n</code></pre> <p>Tags must be declared in the global configuration to help ensure that every tag referenced by an event actually exists.</p>"},{"location":"format/#destination-declaration","title":"Destination Declaration","text":"<p>A destination declaration contains the name and description of a Destination. A list of Destinations will be defined for each event that will determine where the Cdp-Proxy client will send it.</p> <p>For cash_events: <pre><code>  destinations:\nSEGMENT:\ndescription: Segment is the Customer Data Platform (CDP) platform at Cash App. With Segment, we can track events that happen when a user interacts with Cash App on mobile, web or in our servers. Segment is able to forward events to downstream destinations including analytics tools, data warehouses, and marketing platforms. In addition, Segment offers a suite of Marketing tools that allows the creation and management of Audiences, Journeys and user traits.  (go/segment)\nAMPLITUDE:\ndescription: Amplitude Analytics is used to track user data and gain insights into user engagement, behavior, retention, and revenue. These tools help answer questions regarding our customers about what happened, why it happened, and which actions to take next. Amplitude Experiments is also the recommended solution at Cash App to run experiments.  (go/amplitude)\nSNOWFLAKE:\ndescription: Snowflake is used as the primary data warehousing solution across Cash App (go/snowflake)\nKAFKA:\ndescription: Custom Kafka topic in CDP Proxy that allows consumption of events for custom business logic.\n</code></pre></p> <p>Declared in the global configuration to help ensure that every destination referenced by an event is allowed.</p> <p>NOTE: MAINTAINED BY THE CDP TEAM. DO NOT ADD/REMOVE/MODIFY.</p>"},{"location":"how-to/","title":"CDF POC How-To Guide","text":""},{"location":"how-to/#identify-2-jobs","title":"Identify 2+ jobs","text":"<p>Identify 2+ jobs for your product that follows the below criteria:</p> <ol> <li>These events should aid in the calculation of business metrics and guide product decision-making</li> <li>Jobs/features should be a good representative sample of the product ecosystem that you are responsible for</li> <li>Include at least one Job that spans across platforms such Desktop/Mobile or Dashboard/POS</li> <li>[Nice to Have] Incorporate shared features that also depend on collaboration with other teams for development and ownership</li> <li>Recommended: You can pick jobs from the go/audience-jtbd if they already satisfy the aforementioned criteria</li> </ol>"},{"location":"how-to/#insert-events-into-tracking-plan","title":"Insert Events into Tracking Plan","text":"<p>Put them here for the POC. This step lets you capture the events you want to build before subsequent steps. You can use this list to ensure you know which Event schema to use (or if you need to request changes to those schemas.)  It can also act as a checklist between Product, Engineering, and Data Consumers to ensure all parties know the important touchpoints to instrument and evaluate. You will have a second time to review your planned events in GitHub later.</p>"},{"location":"how-to/#identify-or-create-event-schemas","title":"Identify or create event schemas","text":"<p>Checkout our git repo recursively (to include submodules) here:</p> <pre><code>git clone --recurse-submodules org-49461806@github.com:squareup/message-schemas.git\n</code></pre> <p>For each event in your product tracking plan,</p>"},{"location":"how-to/#check-for-an-existing-event","title":"Check for an Existing Event","text":"<p>CDP provides a UI to catalog all existing event schemas. Before creating new events, check if your plan can be served by these events at go/ueschema.</p> <p>For advice on your use case and how to apply these Schemas, contact us in #unified-eventing-data-council and on call can advise.</p>"},{"location":"how-to/#create-a-new-event-or-update-existing-event","title":"Create a New Event or Update Existing Event","text":""},{"location":"how-to/#create-a-new-event-for-a-new-feature","title":"Create a new Event for a new Feature","text":"<p>First, create a directory for your feature in message-schemas/cdp_events. The directory name should be snake case.</p> <p>For Example, if your feature is \u201cHomeModule\u201d then the directory should be:</p> <pre><code>message-schemas/cdp_event/home_module\n</code></pre> <p>The file name for your feature yaml should also be snake case. For the feature HomeModule, the resulting filename should be:</p> <pre><code>message-schemas/cdp_event/home_module/home_module.yaml\n</code></pre> <p>Copy the template for creating your feature yaml and replace the red text with the actual values for your events. Details of each field will be covered below.</p> <pre><code>FeatureName: # This should be camelcase\ndefinition: description of the feature\nowners:\n- registry-group # make sure it has git-sync enabled\nactions:\nActivityName: # This should be camelcase\ndefinition: description of the activity\nevents:\nEventName: # This should be camelcase\ncomment: description of the event\nparams:\n- field_1 : String # field  names should be snake case\nsemantic_types:\n- namespace: CONSUMER\nname: FIRST_NAME\nrubric_version: 0\ncomment: Description of field_1\n- field_2 : String\ncomment: Description of field_2\n- field_3: EnumName\ncomment: Description of field_3\ndestinations:\n- SNOWFLAKE # Only snowflake is available for this POC\n# If you need enums, declare it at the feature level. If you do not need enums, delete everything below\ntypes:\nEnumName: # This should be camelcase. If the enum is 1 word, make sure the first letter is uppercased\n- enum_field_1: # This should all caps snake case \ncomment: Description of enum_field_1\n- enum_field_2: # This should all caps snake case \ncomment: Description of enum_field_2\n- enum_field_3: # This should all caps snake case \ncomment: Description of enum_field_3\n</code></pre>"},{"location":"how-to/#yaml-specification","title":"Yaml Specification","text":""},{"location":"how-to/#feature","title":"Feature","text":"<p>The FeatureName key should be replaced with the actual feature name. Feature has the following properties: - definition: Description of the feature - owners: List of registry group owners for the feature. Owner teams are responsible for all events defined in the feature file. They will be required to approve changes to these schemas. Make sure git-sync is enabled for the registry group.   - Example registry group: marketing-automation - actions: List of activities</p>"},{"location":"how-to/#actions","title":"Actions","text":"<p>List of activities. Refer to Square Eventing Framework proposal for details on feature and activities</p>"},{"location":"how-to/#activity","title":"Activity","text":"<p>The ActivityName key should be replaced with the actual activity name. Activity has the following properties:</p> <ul> <li>definition: Description of the activity</li> <li>events: List of events</li> </ul>"},{"location":"how-to/#event","title":"Event","text":"<p>The EventName key should be replaced with the actual event name. An event block has the following properties:</p> <ul> <li>comment: Description of the event</li> <li>destination: List of destinations to sync the event to (only Snowflake is supported as of August 2024)</li> <li>params: Map of fields to their definition</li> </ul>"},{"location":"how-to/#param","title":"Param","text":"<p>A param should be thought of as an event field. Each param has the following properties: - type: Field value type   - Supported primitive types (details)     - String     - Int32     - Int64       - For timestamp fields it is recommended to use Int64 type to represent an epoch millisecond timestamp     - Bool     - Double   - Can be an enum; more details in the enum section   - Can be an array of one of the primitives or enum; just add brackets around the type. You cannot have an array of mixed types. Array has to store elements of the same type. Example:</p> <pre><code>Start: # AccountCreateStart\ncomment: User started create account flow\nparams:\n- merchant_categories : [String]\ncomment: list of merchant categories\n</code></pre> <ul> <li>comment: Description of the field</li> <li>semantic_types: List of semantic information relating to the field, which is used to determine PII level. Refer to the DSL rubric for possible values.</li> <li>namespace: Semantic types are grouped by namespace, which are the top level keys in the rubric json. Currently available namespaces:<ul> <li>PCI</li> <li>CONSUMER</li> <li>MERCHANT</li> <li>EMPLOYEE</li> </ul> </li> <li>semantic_type: Describes the general contents of data in a field. Choose from the semantic types defined in the dsl rubric </li> <li>version: Version of the DSL rubric definitions</li> </ul> <pre><code>Start:\nparams:\n- first_name: String\ncomment: first name of person owner of the merchant\nsemantic_types:\n- name: FIRST_NAME\nnamespace: consumer\nrubric_version: 0\n</code></pre>"},{"location":"how-to/#enums","title":"Enums","text":"<p>Params can have enum types. For enums that are only used in 1 feature, they should be declared in the same feature file. You should declare the enum in the types list of your feature:</p> <pre><code>FeatureName:\ndefinition:\nowners:\nactions:\n...\ntypes:\nStatus:\n- INACTIVE\ncomment: account was deactivated by owner\n- ACTIVE\ncomment: account is active and accepting payments\nLevel:\n- PRIMARY\ncomment: first level of naming hierarchy\n- SECONDARY\ncomment: second level of naming hierarchy\n</code></pre>"},{"location":"how-to/#global-enums","title":"Global Enums","text":"<p>If you want to reuse your enums across multiple features, you will need to first declare them in the message-schemas/cdp_events/cdf.yaml file. There is a custom_types block that is a list of global enum types; add yours to this list:</p> <pre><code>cdf:\ncustom_types:\nCurrencyCode:\n- USD\n- GBP\n- JPY\n- BTC\n- CAD\n</code></pre> <p>Once you have added your global enum to custom_types list, you can reference it in your feature files and use the enum as the value type for your event fields:</p> <pre><code>Account:\ndefinition: Square Merchant Account\nowners:\n- marketing-automation\nactions:\nCreate:\ndefinition: Create Square account\nevents:\nStart:\ncomment: Started square account creation\nparams:\n- currency_code: CurrencyCode\ncomment: The currency code used by the merchant\n</code></pre>"},{"location":"how-to/#create-a-new-activity-or-event-for-an-existing-feature","title":"Create a new Activity or Event for an existing Feature","text":"<p>If the feature already exists, you can add a new activity to the actions array. Likewise, you can also add a new event to the events field of any activity.</p>"},{"location":"how-to/#commit-push-and-open-pr","title":"Commit, Push, and Open PR","text":"<p>Once you are finished editing your feature yaml. Run through the normal git flow of \u201cgit add\u201d then \u201cgit commit\u201d with a commit message describing the event you have added or updated:</p> <pre><code>git add &lt;event yaml&gt;\ngit commit -m \"added X event\"\n</code></pre> <p>For all schema changes, Our system has a pre-commit hook set up for code generation. When you commit, you will see additional files checked in automatically. This includes: - avro schemas - proto schemas - A JSON map used internally for routing - OWNERS.yaml</p> <p>Warning</p> <p>To ensure these files are correctly updated and integrated, please avoid skipping the pre-commit hook (occurs when <code>--no-verify</code> flag is set or the GitHub web editor is used)!</p> <p>Once the \u201cgit commit\u201d command finishes successfully, push your changes:</p> <pre><code>git push\n</code></pre> <p>You should now be able to open a PR in the message-schemas repo.</p> <p>If your yaml is not valid, the pre-commit hook should log errors on what needs to be fixed. Repeat the flow:</p> <ol> <li>Make changes</li> <li><code>git add</code> changes</li> <li><code>git commit</code> changes<ol> <li>If <code>git commit</code> is successful, then <code>git push</code> and open PR</li> <li>If <code>git commit</code> is unsuccessful, start from (1)</li> </ol> </li> </ol> <p>If it is not clear what the error is, feel free to reach out to #cdp for help.</p>"},{"location":"how-to/#wait-for-approvals-and-infrastructure","title":"Wait for Approvals and Infrastructure","text":"<p>After your PR has been approved and successfully passed all checks, you are ready to merge it into the main branch. You will need to manually merge your PR! Merging kicks off the runway pipeline which handles a few prerequisites to send your events, which includes: - Schema validation checks - Schema upload to S3 bucket - Schema syncing to confluent     - Via automated PR like this one against tf-confluent-v2 repo to apply schema changes and provision kafka infrastructure</p> <p>You can view your new event definition in our GitHub Docs! </p> <p>It is recommended that you leave a few hours for Kafka infrastructure to be provisioned by terraform. Unfortunately, DSI owns the terraform build and only their team has access to view the progress.</p> <p>The code gen pipeline uploads new events to Artifactory once a day around midnight. Regardless if there are any new events, the job will run every night and create a new artifact. Once this job completes, you will be able to move onto step 6. Essentially, you will have to wait until the next day to start instrumenting with your code gen classes. The CDP team is working on improving this turnaround time for general release.</p> <p>(For the POC, you can check these repositories to find your change and check on status or if anything went wrong, tf-confluent-v2, also feel free to ping #ue-prototype for speedy help.)</p> <p>It is recommended that you leave a few hours for Kafka infrastructure to be provisioned by Terraform. DSI owns the Terraform build and only their team has access to view the progress.</p> <p>The code gen pipeline uploads new events to Artifactory once a day around midnight. Regardless of whether there are any new events, the job will run every night and create a new artifact. Once this job completes you will be able to move onto the next step. Essentially, you will have to wait until the next day to start instrumenting with your code gen classes. The CDP team is working on improving this turnaround time for general release.</p> <p>(For the POC, you can check these repositories to find your change and check on status or if anything went wrong, tf-confluent-v2; also, feel free to ping #ue-prototype for speedy help.)</p>"},{"location":"how-to/#instrument-events-in-your-applications-through-staging","title":"Instrument Events in your Applications (through Staging)","text":""},{"location":"how-to/#web-engineers","title":"Web Engineers","text":"<p>Once a schema has been published, a web engineer will then need to:</p> <ol> <li>Add or Update <code>@squareup/message-schemas-web</code> dependency to use the latest version</li> <li>Call <code>trackWithSchema</code> in application code:</li> </ol> <pre><code>const accountEvents = AccountCreateStart({\naccountAge: 17,\naccountType: \"Kevin's test account\",\ncurrencyCode: 'USD',\nfirstName: 'Kevin',\nhasEmployees: false,\nsquareAccount: true,\nstatuses: ['ACTIVE', 'FROZEN'],\n});\ntrackWithSchema(accountEvents);\n</code></pre>"},{"location":"how-to/#ios-engineers","title":"iOS Engineers","text":"<p>Once a schema has been published, an iOS engineer should:</p> <ol> <li> <p>Update the Pod (MessageSchemas) that contains all the generated event structures. In a terminal, and within the root of the ios-register repo, run the following:</p> <p>be pod update MessageSchemas</p> </li> <li> <p>Add the following dependencies to your Bazel module:</p> <pre><code>```yaml\nsq_apple_framework()\n    ...\n    deps = [\n    \"//Frameworks/UnifiedEventing/Public:UnifiedEventing\",\n    \"//Frameworks/Metron/Public:Metron\",\n    \"//Pods/MessageSchemas\",\n],\n...\n</code></pre> </li> <li> <p>Add the imports at the top of the file where you intend on logging:</p> <pre><code>import MessageSchemas\nimport Metron\nimport UnifiedEventing\n</code></pre> </li> <li> <p>Call <code>Log.cdpv2</code> in your code:</p> <pre><code>Log.cdpv2(\n    BetaLabsRenderView(\n        feature_id: 'test-feature-id',\n        feature_format: 'feature-format',\n        feature_name: 'Beta Labs Feature name',\n        is_default_view: false,\n        event_description: 'test event description',\n        feature_parent_id: 'test-feature-parent-id',\n        feature_layout: 'test-feature-layout',\n        is_task_completed: false\n   )\n)\n</code></pre> </li> </ol>"},{"location":"how-to/#android-engineers","title":"Android Engineers","text":"<ol> <li>Once a schema has been published (may take 24h), it will appear in one of the published compiled libraries here,</li> <li>Update the event library to the latest version. You can view the latest version number here </li> <li>Open dependencies.gradle</li> <li>Update unified_eventing_events to the new version</li> <li>Don\u2019t sync your IDE yet!</li> <li>If necessary, add a reference from your module to the events library. Add api deps.unified_eventing_events to your build.gradle.</li> <li>Sync your IDE to have the latest version of the events available.</li> <li>Send via one of the following methods. The first two use a lambda to defer or avoid construction of the event when it\u2019s going to be filtered or sampled out. The third is an extension method in Metron that calls the static method.</li> <li>Metron.cdpv2 { MyEvent(param1, param2) }</li> <li>metronLogger.cdpv2 { MyEvent(param1, param2) }</li> <li>MyEvent(param1, param2).log()</li> </ol>"},{"location":"how-to/#validate-data-in-snowflake","title":"Validate Data in Snowflake","text":"<p>In the POC, data will land in go/stagingsnowflake.</p> <p>After the message-schemas post-merge workflow completes a follow-up workflow is kicked off to update the kafka-snowflake connector to include (or remove) the updated topics. Once this is complete the pipeline is ready for events to be written to snowflake.</p>"},{"location":"how-to/#event-tables","title":"Event tables","text":"<p>Example event: HomeModule_Render_View Table: CUSTOMER_DATA.GLOBAL.HOME_MODULE_RENDER_VIEW Query:</p> <pre><code>SELECT * FROM CUSTOMER_DATA.GLOBAL.HOME_MODULE_RENDER_VIEW;\n</code></pre> <p>Example query:</p> <pre><code>SELECT record_content:entity_id AS entity_id, record_content:properties:feature AS feature \nFROM customer_data.global.home_module_render_view\nWHERE record_content:entity_type = 'merchant';\n</code></pre>"},{"location":"how-to/#aggregate-tables","title":"Aggregate tables","text":"<p>The aggregate table is built off of a dynamic table. The creation of this table is not automatic and requires manual intervention at this phase of the project. In future iterations this will become automated.</p> <p>Table: CUSTOMER_DATA.GLOBAL.TRACK Query:</p> <pre><code>SELECT * FROM CUSTOMER_DATA.GLOBAL.TRACK;\n</code></pre> <p>Example query:</p> <pre><code>SELECT *\nFROM CUSTOMER_DATA.GLOBAL.TRACK\nWHERE record_content:event_name = 'account_create_start'\n</code></pre>"},{"location":"how-to/#pii","title":"PII","text":"<p>The CDP to Snowflake pipeline is currently not set up to handle PII. Fields annotated with a semantic_type, will be set to null in Snowflake. We are working on setting up our Snowflake pipeline to handle PII and should have this available shortly.</p>"},{"location":"test_event/","title":"Events","text":""},{"location":"test_event/#purchase-order-yaml","title":"Purchase Order YAML","text":"<pre><code>PurchaseOrder: # This should be camelcase\n  definition: Buy products and/or services from a supplier by sending a purchase order.\n  owners:\n    - retail-analytics # make sure it has git-sync enabled\n    - retail-eng\n  actions:\n    View:\n      definition: View library of existing purchase orders and action options\n      events:\n        Create:\n          comment: Triggers when user chooses to create a new purchase order\n          params:\n          - object_name : ObjectName # field  names should be snakecase\n            comment: Semantics of the object being interacted with\n          - object_format : ObjectFormat\n            comment: Format of the object being interacted with\n          destinations:\n          - SNOWFLAKE # Only snowflake is available for this POC\n          # - product_event_order : Null # optional\n          # - product_event_start_end : End # optional\n          - source_database : CUSTOMER_DATA\n          - source_schema : DASHBOARD\n          - source_table : merchant_create_purchase_order\n          - filter : [\u201cproperties_action='EDIT'\u201d]\n\n# If you need enums, declare it at the feature level. If you do not need enums, delete the everything below\n  types:\n    ObjectName: # This should be camelcase. If the enum is 1 word, make sure the first letter is upper cased\n      - PO_INDEX: # This should all caps snakecase \n          comment: Description of enum_field_1\n      - PO_ELLIPSIS_DROPDOWN: # This should all caps snakecase \n          comment: Description of enum_field_2\n      - NEW_PO: # This should all caps snakecase \n          comment: Description of enum_field_3\n      - EDIT_PO: # This should all caps snakecase \n          comment: Description of enum_field_4\n      - SEND_PO: # This should all caps snakecase \n          comment: Description of enum_field_5\n    ObjectFormat: # This should be camelcase. If the enum is 1 word, make sure the first letter is upper cased\n      - MODULE: # This should all caps snakecase \n          comment: Description of enum_field_1\n      - MODAL: # This should all caps snakecase \n          comment: Description of enum_field_2\n      - BLADE: # This should all caps snakecase \n          comment: Description of enum_field_3\n</code></pre>"},{"location":"test_event/#event-2-yaml","title":"Event 2 YAML","text":"<pre><code>FeatureName: # This should be camelcase\n  definition: description of the feature\n  owners:\n    - registry-group # make sure it has git-sync enabled\n  actions:\n    ActivityName: # This should be camelcase\n      definition: description of the activity\n      events:\n        EventName: # This should be camelcase\n          comment: description of the event\n          params:\n          - field_1 : String # field  names should be snakecase\n            semantic_types:\n              - namespace: CONSUMER\n                name: FIRST_NAME\n                rubric_version: 0\n            comment: Description of field_1\n          - field_2 : String\n            comment: Description of field_2\n          - field_3: EnumName\n            comment: Description of field_3\n          destinations:\n          - SNOWFLAKE # Only snowflake is available for this POC\n\n# If you need enums, declare it at the feature level. If you do not need enums, delete the everything below\n  types:\n    EnumName: # This should be camelcase. If the enum is 1 word, make sure the first letter is upper cased\n      - enum_field_1: # This should all caps snakecase \n          comment: Description of enum_field_1\n      - enum_field_2: # This should all caps snakecase \n          comment: Description of enum_field_2\n      - enum_field_3: # This should all caps snakecase \n          comment: Description of enum_field_3\n</code></pre>"}]}